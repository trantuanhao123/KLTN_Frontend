// src/hooks/useCars.js
import { useEffect, useState, useCallback } from "react";
import carApi from "../api/vehicle";

export default function useCars() {
  const [cars, setCars] = useState([]);
  const [selectedCar, setSelectedCar] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // üü¢ L·∫•y danh s√°ch xe
  useEffect(() => {
    fetchAllCars();
  }, []);

  async function fetchAllCars() {
    try {
      setLoading(true);
      const res = await carApi.getAllCars();
      setCars(res.data || []);
    } catch (err) {
      setError(err.message || "L·ªói khi t·∫£i danh s√°ch xe");
    } finally {
      setLoading(false);
    }
  }
  const fetchCarById = useCallback(async (id) => {
    try {
      // ‚ùå B·ªé setLoading(true) ƒë·ªÉ component cha t·ª± qu·∫£n l√Ω loading ‚ùå
      const res = await carApi.getCarById(id);
      setSelectedCar(res.data);
      return res.data;
    } catch (err) {
      // ‚úÖ Gi·ªØ l·∫°i setError ƒë·ªÉ ghi nh·∫≠n l·ªói (n·∫øu c·∫ßn)
      setError(err.message || "Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng tin xe");
      throw err; // N√©m l·ªói ƒë·ªÉ component s·ª≠ d·ª•ng c√≥ th·ªÉ b·∫Øt ƒë∆∞·ª£c
    } finally {
      // ‚ùå B·ªé setLoading(false) ‚ùå
    }
  }, []);
  async function createCar(formData) {
    try {
      const res = await carApi.createCar(formData);
      await fetchAllCars();
      return res.data;
    } catch (err) {
      throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o xe");
    }
  }
  async function updateCar(id, formData) {
    try {
      const res = await carApi.updateCar(id, formData);
      const updatedCar = res.data;

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch xe
      await fetchAllCars();

      // C·∫≠p nh·∫≠t selectedCar n·∫øu n√≥ l√† xe v·ª´a ƒë∆∞·ª£c s·ª≠a
      if (selectedCar && selectedCar.CAR_ID === id) {
        setSelectedCar(updatedCar);
      }

      return updatedCar;
    } catch (err) {
      throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t xe");
    }
  }
  async function deleteCar(id) {
    try {
      await carApi.deleteCar(id);
      await fetchAllCars();
    } catch (err) {
      throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a xe");
    }
  }

  return {
    cars,
    selectedCar,
    loading,
    error,
    fetchAllCars,
    fetchCarById,
    createCar,
    updateCar,
    deleteCar,
  };
}
