import React, { useState, useEffect, useCallback } from "react";
import { useParams } from "react-router-dom";
import Layout from "../../components/layouts/Layout";
import Card from "../../components/ui/Card";
import Button from "../../components/ui/Button";

// Import Custom Hooks
import useServices from "../../hooks/useService";
import useBranches from "../../hooks/useBranch";
import useCategory from "../../hooks/useCategory";
import useCars from "../../hooks/useCar";

export default function VehicleUpdateForm() {
  const { id: carId } = useParams();
  const { fetchCarById, updateCar, error: carError } = useCars();

  const {
    services,
    isLoading: isLoadingServices,
    error: servicesError,
  } = useServices();

  const {
    branches,
    isLoading: isLoadingBranches,
    error: branchesError,
  } = useBranches();

  const {
    categories,
    isLoading: isLoadingCategories,
    error: categoriesError,
  } = useCategory();

  const [formData, setFormData] = useState({
    licensePlate: "",
    categoryId: "",
    brand: "",
    model: "",
    color: "",
    transmission: "AUTOMATIC",
    fuelType: "PETROL",
    status: "AVAILABLE",
    pricePerHour: "",
    pricePerDay: "",
    branchId: "",
    description: "",
    insuranceInfo: "",
    currentMileage: "",
    serviceIds: [],
    carImages: [],
  });

  const [currentImages, setCurrentImages] = useState([]);
  const [isFetchingCar, setIsFetchingCar] = useState(true);

  // üü¢ DEBUG: Log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
  useEffect(() => {
    console.log("üîç Current formData.serviceIds:", formData.serviceIds);
    console.log("üîç Available services:", services);
  }, [formData.serviceIds, services]);

  useEffect(() => {
    if (!carId) {
      setIsFetchingCar(false);
      return;
    }

    const loadCarData = async () => {
      setIsFetchingCar(true);
      try {
        const carData = await fetchCarById(carId);

        if (carData) {
          // üü¢ LOG: Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
          console.log("üì¶ Full Car Data:", carData);
          console.log("üîß Services from API:", carData.services);
          console.log("üñºÔ∏è Images from API:", carData.images);

          // üü¢ X·ª¨ L√ù SERVICE IDS - T·ª´ API tr·∫£ v·ªÅ 'services' (ch·ªØ th∆∞·ªùng)
          let serviceIdsArray = [];
          const servicesData = carData.services || carData.Services || [];

          if (Array.isArray(servicesData)) {
            serviceIdsArray = servicesData.map((s) => {
              // API tr·∫£ v·ªÅ SERVICE_ID
              const id = s.SERVICE_ID || s.serviceId || s.id;
              return String(id);
            });
          }

          console.log("‚úÖ Converted serviceIds:", serviceIdsArray);

          const initialData = {
            licensePlate: carData.LICENSE_PLATE || "",
            categoryId: String(carData.CATEGORY_ID || ""),
            brand: carData.BRAND || "",
            model: carData.MODEL || "",
            color: carData.COLOR || "",
            transmission: carData.TRANSMISSION || "AUTOMATIC",
            fuelType: carData.FUEL_TYPE || "PETROL",
            status: carData.STATUS || "AVAILABLE",
            pricePerHour: carData.PRICE_PER_HOUR || "",
            pricePerDay: carData.PRICE_PER_DAY || "",
            branchId: String(carData.BRANCH_ID || ""),
            description: carData.DESCRIPTION || "",
            insuranceInfo: carData.INSURANCE_INFO || "",
            currentMileage: carData.CURRENT_MILEAGE || "",
            serviceIds: serviceIdsArray,
            carImages: [],
          };

          setFormData(initialData);

          // üü¢ X·ª¨ L√ù IMAGES - API tr·∫£ v·ªÅ 'images' (ch·ªØ th∆∞·ªùng)
          const imagesData =
            carData.images || carData.CarImages || carData.carImages || [];
          console.log("‚úÖ Processed images:", imagesData);
          setCurrentImages(imagesData);
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y xe v·ªõi ID: ${carId}`);
        }
      } catch (e) {
        console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt xe:", e);
      } finally {
        setIsFetchingCar(false);
      }
    };

    loadCarData();
  }, [carId, fetchCarById]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleServiceChange = (e) => {
    const { value, checked } = e.target;

    // üü¢ LOG: Debug checkbox change
    console.log(`üîò Checkbox changed: ${value}, Checked: ${checked}`);

    setFormData((prev) => {
      let newServiceIds;
      if (checked) {
        newServiceIds = [...prev.serviceIds, value];
      } else {
        newServiceIds = prev.serviceIds.filter((id) => id !== value);
      }

      console.log("‚úÖ New serviceIds:", newServiceIds);
      return { ...prev, serviceIds: newServiceIds };
    });
  };

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setFormData((prev) => ({ ...prev, carImages: files }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!carId) {
      alert("Kh√¥ng t√¨m th·∫•y ID xe ƒë·ªÉ c·∫≠p nh·∫≠t.");
      return;
    }

    try {
      const data = new FormData();

      Object.entries(formData).forEach(([key, value]) => {
        if (key === "carImages") {
          value.forEach((file) => data.append("carImages", file));
        } else if (key === "serviceIds") {
          data.append("serviceIds", value.join(","));
        } else {
          data.append(key, value);
        }
      });

      const res = await updateCar(carId, data);
      alert("C·∫≠p nh·∫≠t xe th√†nh c√¥ng! M√£ xe: " + res.CAR_ID);
    } catch (err) {
      console.error(err);
      alert(err.message || "L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu!");
    }
  };

  const isGlobalLoading =
    isFetchingCar ||
    isLoadingServices ||
    isLoadingBranches ||
    isLoadingCategories;

  if (isGlobalLoading) {
    return (
      <Layout>
        <Card title="C·∫≠p nh·∫≠t Xe">
          <p>ƒêang t·∫£i d·ªØ li·ªáu xe v√† c√°c t√πy ch·ªçn...</p>
        </Card>
      </Layout>
    );
  }

  const combinedError =
    carError || servicesError || branchesError || categoriesError;
  if (combinedError) {
    return (
      <Layout>
        <Card title="C·∫≠p nh·∫≠t Xe">
          <p className="text-red-500">
            L·ªói t·∫£i d·ªØ li·ªáu: {combinedError.message || combinedError}
          </p>
        </Card>
      </Layout>
    );
  }

  if (!carId || (!isFetchingCar && !formData.licensePlate)) {
    return (
      <Layout>
        <Card title="C·∫≠p nh·∫≠t Xe">
          <p className="text-red-500">
            Kh√¥ng t√¨m th·∫•y xe c·∫ßn c·∫≠p nh·∫≠t ho·∫∑c ID kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm
            tra l·∫°i ƒë∆∞·ªùng d·∫´n.
          </p>
        </Card>
      </Layout>
    );
  }

  const getImageUrl = (img) => {
    const rawUrl = img.URL || img.url || img.IMAGE_URL || img.image_url || "";

    // N·∫øu l√† relative path, c·∫ßn th√™m base URL
    if (rawUrl && !rawUrl.startsWith("http")) {
      const baseUrl = import.meta.env.BACKEND_URL || "http://localhost:8080";
      return `${baseUrl}/images/${rawUrl}`;
    }

    return rawUrl;
  };

  return (
    <Layout>
      <Card title={`C·∫≠p nh·∫≠t Xe: ${formData.licensePlate || "ƒêang t·∫£i..."}`}>
        <form className="space-y-4" onSubmit={handleSubmit}>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">Bi·ªÉn s·ªë</label>
              <input
                name="licensePlate"
                value={formData.licensePlate}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
                required
              />
            </div>
            <div>
              <label className="block text-sm mb-1">M√£ danh m·ª•c</label>
              <select
                name="categoryId"
                value={formData.categoryId}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
                required
              >
                <option value="" disabled>
                  -- Ch·ªçn danh m·ª•c --
                </option>
                {categories.map((c) => (
                  <option key={c.CATEGORY_ID} value={String(c.CATEGORY_ID)}>
                    {c.NAME} ({c.CODE})
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">H√£ng xe</label>
              <input
                name="brand"
                value={formData.brand}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">M·∫´u xe</label>
              <input
                name="model"
                value={formData.model}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">M√†u s·∫Øc</label>
              <input
                name="color"
                value={formData.color}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">Truy·ªÅn ƒë·ªông</label>
              <select
                name="transmission"
                value={formData.transmission}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              >
                <option value="AUTOMATIC">T·ª± ƒë·ªông</option>
                <option value="MANUAL">S·ªë s√†n</option>
              </select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">Nhi√™n li·ªáu</label>
              <select
                name="fuelType"
                value={formData.fuelType}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              >
                <option value="PETROL">XƒÉng</option>
                <option value="DIESEL">D·∫ßu</option>
                <option value="ELECTRIC">ƒêi·ªán</option>
              </select>
            </div>
            <div>
              <label className="block text-sm mb-1">Tr·∫°ng th√°i</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              >
                <option value="AVAILABLE">Available</option>
                <option value="RENTED">Rented</option>
                <option value="MAINTENANCE">Maintenance</option>
              </select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">Gi√° / gi·ªù</label>
              <input
                type="number"
                name="pricePerHour"
                value={formData.pricePerHour}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">Gi√° / ng√†y</label>
              <input
                type="number"
                name="pricePerDay"
                value={formData.pricePerDay}
                onChange={handleChange}
                className="w-full border rounded px-3 py-2"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm mb-1">Chi nh√°nh</label>
            <select
              name="branchId"
              value={formData.branchId}
              onChange={handleChange}
              className="w-full border rounded px-3 py-2"
              required
            >
              <option value="" disabled>
                -- Ch·ªçn chi nh√°nh --
              </option>
              {branches.map((b) => (
                <option key={b.BRANCH_ID} value={String(b.BRANCH_ID)}>
                  {b.NAME}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm mb-1">M√¥ t·∫£</label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleChange}
              className="w-full border rounded px-3 py-2"
            />
          </div>

          <div>
            <label className="block text-sm mb-1">Th√¥ng tin b·∫£o hi·ªÉm</label>
            <input
              name="insuranceInfo"
              value={formData.insuranceInfo}
              onChange={handleChange}
              className="w-full border rounded px-3 py-2"
            />
          </div>

          <div>
            <label className="block text-sm mb-1">S·ªë km hi·ªán t·∫°i</label>
            <input
              type="number"
              name="currentMileage"
              value={formData.currentMileage}
              onChange={handleChange}
              className="w-full border rounded px-3 py-2"
            />
          </div>

          {/* üü¢ D·ªäCH V·ª§ - C√≥ debug info */}
          <div>
            <label className="block text-sm mb-1">
              D·ªãch v·ª• ƒëi k√®m
              <span className="text-xs text-gray-500 ml-2">
                (ƒê√£ ch·ªçn: {formData.serviceIds.length})
              </span>
            </label>
            <div className="border rounded p-3 space-y-2">
              {services.length === 0 ? (
                <p className="text-sm text-gray-500">Kh√¥ng c√≥ d·ªãch v·ª• n√†o</p>
              ) : (
                services.map((s) => {
                  const serviceIdStr = String(s.SERVICE_ID);
                  const isChecked = formData.serviceIds.includes(serviceIdStr);

                  return (
                    <div key={s.SERVICE_ID} className="flex items-center">
                      <input
                        type="checkbox"
                        id={`service-${s.SERVICE_ID}`}
                        name="serviceIds"
                        value={serviceIdStr}
                        checked={isChecked}
                        onChange={handleServiceChange}
                        className="mr-2 h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      />
                      <label
                        htmlFor={`service-${s.SERVICE_ID}`}
                        className="text-sm cursor-pointer"
                      >
                        {s.NAME}
                        <span className="text-xs text-gray-400 ml-1">
                          (ID: {serviceIdStr})
                        </span>
                      </label>
                    </div>
                  );
                })
              )}
            </div>
          </div>

          {/* üü¢ H√åNH ·∫¢NH - C√≥ x·ª≠ l√Ω nhi·ªÅu tr∆∞·ªùng h·ª£p URL */}
          <div>
            <label className="block text-sm mb-1">H√¨nh ·∫£nh hi·ªán t·∫°i</label>
            {currentImages.length > 0 ? (
              <div className="mt-2 flex gap-2 flex-wrap">
                {currentImages.map((img, index) => {
                  const imageUrl = getImageUrl(img);
                  const imageId =
                    img.IMAGE_ID || img.imageId || img.id || index;

                  return (
                    <div key={imageId} className="relative w-24 h-24">
                      {imageUrl ? (
                        <img
                          src={imageUrl}
                          alt={`current-${imageId}`}
                          className="w-full h-full object-cover rounded border border-yellow-500"
                          onError={(e) => {
                            console.error("‚ùå L·ªói load ·∫£nh:", imageUrl);
                            e.target.src =
                              "https://via.placeholder.com/96?text=Error";
                          }}
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gray-200 rounded border border-red-500">
                          <span className="text-xs text-gray-500">No URL</span>
                        </div>
                      )}
                      <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 truncate">
                        ID: {imageId}
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <p className="text-sm text-gray-500">Ch∆∞a c√≥ ·∫£nh n√†o.</p>
            )}

            <label className="block text-sm mt-4 mb-1">
              Th√™m/Thay th·∫ø H√¨nh ·∫£nh m·ªõi
            </label>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileChange}
              className="w-full"
            />
            {formData.carImages.length > 0 && (
              <div className="mt-2 flex gap-2 flex-wrap">
                {formData.carImages.map((file, idx) => (
                  <img
                    key={idx}
                    src={URL.createObjectURL(file)}
                    alt={`preview-new-${idx}`}
                    className="w-24 h-24 object-cover rounded border border-green-500"
                  />
                ))}
              </div>
            )}
          </div>
          <div
            className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4"
            role="alert"
          >
            <p className="font-bold text-lg">‚ö†Ô∏è C·∫¢NH B√ÅO M·∫§T D·ªÆ LI·ªÜU!</p>
            <p className="text-base">
              Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c c√°c tr∆∞·ªùng d·ªØ li·ªáu
              <span className="text-red-600"></span>. N·∫øu kh√¥ng, d·ªØ li·ªáu c√≥ th·ªÉ
              kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c b·ªã m·∫•t sau khi l∆∞u.
            </p>
          </div>
          <div className="flex justify-end">
            <Button type="submit">C·∫≠p nh·∫≠t Xe</Button>
          </div>
        </form>
      </Card>
    </Layout>
  );
}
