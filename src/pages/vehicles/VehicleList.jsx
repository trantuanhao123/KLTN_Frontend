import React, { useState } from "react"; // üëà Th√™m useState
import Layout from "../../components/layouts/Layout";
import Card from "../../components/ui/Card";
import Button from "../../components/ui/Button";
import Table from "../../components/ui/Table";
import { Link } from "react-router-dom";
import useCars from "../../hooks/useCar";
import ConfirmDeleteModal from "../../components/ui/ConfirmDeleteModal"; // üëà Import modal m·ªõi

const BACKEND_URL = import.meta.env.BACKEND_URL || "http://localhost:8080";

export default function VehicleList() {
  const { cars, loading, error, deleteCar } = useCars(); // üëà L·∫•y h√†m deleteCar

  // üÜï STATE QU·∫¢N L√ù MODAL X√ÅC NH·∫¨N
  const [isModalOpen, setIsModalOpen] = useState(false);
  // carToDelete s·∫Ω ch·ª©a to√†n b·ªô th√¥ng tin xe (ho·∫∑c √≠t nh·∫•t l√† ID v√† T√™n/Model)
  const [carToDelete, setCarToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false); // State cho tr·∫°ng th√°i x√≥a
  const [deleteError, setDeleteError] = useState(null);

  const headers = [
    "STT",
    "H√¨nh ·∫£nh",
    "Lo·∫°i / Model",
    "Tr·∫°ng th√°i",
    "Gi√° (VNƒê/ng√†y)",
    "H√†nh ƒë·ªông",
  ];

  // üÜï H√ÄM M·ªû MODAL
  // Nh·∫≠n v√†o ƒë·ªëi t∆∞·ª£ng xe ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt trong modal
  const handleDeleteClick = (car) => {
    setCarToDelete(car);
    setIsModalOpen(true);
    setDeleteError(null);
  };

  // üÜï H√ÄM X·ª¨ L√ù X√ìA KHI ƒê√É X√ÅC NH·∫¨N
  const handleConfirmDelete = async () => {
    if (!carToDelete) return;

    setIsDeleting(true);
    setDeleteError(null);

    try {
      await deleteCar(carToDelete.CAR_ID); // G·ªçi h√†m x√≥a t·ª´ hook

      // X√≥a th√†nh c√¥ng
      setIsModalOpen(false);
      setCarToDelete(null);
      // B·∫°n c√≥ th·ªÉ th√™m th√¥ng b√°o "X√≥a th√†nh c√¥ng" ·ªü ƒë√¢y (v√≠ d·ª•: Toast)
    } catch (err) {
      // X√≥a th·∫•t b·∫°i
      setDeleteError(err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√≥a xe.");
    } finally {
      setIsDeleting(false);
    }
  };

  // üÜï H√ÄM ƒê√ìNG MODAL
  const handleCancelDelete = () => {
    setIsModalOpen(false);
    setCarToDelete(null);
    setDeleteError(null);
  };

  return (
    <Layout>
      {/* ... (Ph·∫ßn ti√™u ƒë·ªÅ v√† n√∫t Th√™m xe) ... */}
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-semibold text-gray-800">Qu·∫£n l√Ω xe</h3>
        <Link to="/vehicles/new">
          <Button>Th√™m xe</Button>
        </Link>
      </div>

      <Card>
        {/* ... (Ph·∫ßn Loading/Error/No data) ... */}
        {loading ? (
          <p className="p-4 text-gray-500">ƒêang t·∫£i danh s√°ch xe...</p>
        ) : error ? (
          <p className="p-4 text-red-500">L·ªói: {error}</p>
        ) : cars.length === 0 ? (
          <p className="p-4 text-gray-500">Ch∆∞a c√≥ xe n√†o trong h·ªá th·ªëng.</p>
        ) : (
          <Table
            headers={headers}
            data={cars}
            renderRow={(row, idx) => (
              <>
                <td className="px-4 py-2">{idx + 1}</td>
                <td className="px-4 py-2">
                  <img
                    src={
                      row.mainImageUrl
                        ? `${BACKEND_URL}/images/${row.mainImageUrl}`
                        : "/no-image.jpg"
                    }
                    alt={`${row.BRAND} ${row.MODEL}`}
                    className="w-20 h-14 object-cover rounded"
                  />
                </td>
                <td className="px-4 py-2">
                  <div>
                    {row.BRAND} {row.MODEL}
                    <div className="text-xs text-gray-500">
                      Bi·ªÉn s·ªë: {row.LICENSE_PLATE}
                    </div>
                  </div>
                </td>
                <td className="px-4 py-2">
                  <span
                    className={`px-2 py-1 rounded text-xs ${
                      row.STATUS === "AVAILABLE"
                        ? "bg-green-100 text-green-700"
                        : "bg-red-100 text-red-700"
                    }`}
                  >
                    {row.STATUS}
                  </span>
                </td>
                <td className="px-4 py-2 font-medium">
                  {Number(row.PRICE_PER_DAY).toLocaleString("vi-VN")}‚Ç´
                </td>
                <td className="px-4 py-2">
                  <div className="flex gap-2">
                    <Link to={`/vehicles/${row.CAR_ID}`}>
                      <Button className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1">
                        Chi ti·∫øt
                      </Button>
                    </Link>
                    <Link to={`/vehicles/edit/${row.CAR_ID}`}>
                      <Button className="bg-amber-600 hover:bg-amber-700 text-white text-sm px-3 py-1">
                        S·ª≠a
                      </Button>
                    </Link>
                    {/* üÜï G·ªåI H√ÄM M·ªû MODAL, truy·ªÅn ƒë·ªëi t∆∞·ª£ng xe (row) */}
                    <Button
                      className="bg-red-600 hover:bg-red-700 text-white text-sm px-3 py-1"
                      onClick={() => handleDeleteClick(row)}
                    >
                      X√≥a
                    </Button>
                  </div>
                </td>
              </>
            )}
          />
        )}
      </Card>

      {/* üÜï COMPONENT MODAL X√ÅC NH·∫¨N */}
      <ConfirmDeleteModal
        isOpen={isModalOpen}
        onClose={handleCancelDelete}
        onConfirm={handleConfirmDelete}
        loading={isDeleting}
        error={deleteError}
        // Truy·ªÅn t√™n xe ƒë·ªÉ hi·ªÉn th·ªã r√µ trong modal
        carName={carToDelete ? `${carToDelete.BRAND} ${carToDelete.MODEL}` : ""}
      />
    </Layout>
  );
}
