// ‚úÖ [TH√äM M·ªöI] import useEffect
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Layout from "../../components/layouts/Layout";
import Card from "../../components/ui/Card";
import Table from "../../components/ui/Table";
import Button from "../../components/ui/Button";
import Modal from "../../components/ui/Modal";
import useAdminUsers from "../../hooks/useCustomer";

export default function CustomerList() {
  const {
    users,
    loading,
    error,
    verifyUser,
    deleteUser,
    reactivateUser,
    fetchAllUsers,
  } = useAdminUsers();

  // üß© B·ªô l·ªçc: all / active / deleted
  const [filterStatus, setFilterStatus] = useState("all");

  // üß© Modal control
  const [modalOpen, setModalOpen] = useState(false);
  const [modalAction, setModalAction] = useState(null); // "verify" | "ban" | "restore"
  const [selectedUser, setSelectedUser] = useState(null);

  // ‚úÖ [TH√äM M·ªöI] T·ª± ƒë·ªông t·∫£i d·ªØ li·ªáu khi component ƒë∆∞·ª£c g·∫Øn (mount)
  // Th√™m hook useEffect ƒë·ªÉ g·ªçi fetchAllUsers() khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu.
  // M·∫£ng r·ªóng [] ƒë·∫£m b·∫£o n√≥ ch·ªâ ch·∫°y m·ªôt l·∫ßn (t∆∞∆°ng ƒë∆∞∆°ng componentDidMount).
  useEffect(() => {
    fetchAllUsers();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // [] ƒë·∫£m b·∫£o effect n√†y ch·ªâ ch·∫°y 1 l·∫ßn khi component mount

  // üîé L·ªçc user theo dropdown
  const filteredUsers = users.filter((u) => {
    if (filterStatus === "active") return u.IS_DELETED === 0;
    if (filterStatus === "deleted") return u.IS_DELETED === 1;
    return true; // "all"
  });

  // ‚öôÔ∏è M·ªü modal
  const openModal = (action, user) => {
    setModalAction(action);
    setSelectedUser(user);
    setModalOpen(true);
  };

  // ‚öôÔ∏è X√°c nh·∫≠n h√†nh ƒë·ªông trong modal
  const handleConfirmAction = async () => {
    if (!selectedUser || !modalAction) return;

    switch (modalAction) {
      case "verify":
        await verifyUser(selectedUser.USER_ID);
        break;
      case "ban":
        await deleteUser(selectedUser.USER_ID);
        break;
      case "restore":
        await reactivateUser(selectedUser.USER_ID);
        break;
      default:
        break;
    }

    await fetchAllUsers(); // Sau khi h√†nh ƒë·ªông, t·∫£i l·∫°i danh s√°ch
    setModalOpen(false);
  };

  return (
    <Layout>
      <div className="space-y-4">
        {/* üß≠ Header */}
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-800">
            Danh s√°ch kh√°ch h√†ng
          </h1>
          <div className="flex items-center gap-3">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="border rounded-md px-3 py-2 text-sm"
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="active">C√≤n ho·∫°t ƒë·ªông</option>
              <option value="deleted">B·ªã c·∫•m</option>
            </select>

            {/* ‚ùå [X√ìA B·ªé] ƒê√£ x√≥a n√∫t "L√†m m·ªõi" */}
          </div>
        </div>

        {/* üß® Hi·ªÉn th·ªã l·ªói */}
        {error && <p className="text-red-500 text-sm font-medium">{error}</p>}

        {/* üßæ B·∫£ng danh s√°ch */}
        <Card>
          {/* ‚úÖ [TH√äM M·ªöI] Hi·ªÉn th·ªã loading khi d·ªØ li·ªáu ƒëang t·∫£i l·∫ßn ƒë·∫ßu */}
          {loading && users.length === 0 ? (
            <p className="p-4 text-center text-gray-500">ƒêang t·∫£i d·ªØ li·ªáu...</p>
          ) : (
            <Table
              headers={[
                "ID",
                "H·ªç t√™n",
                "Email",
                "ƒêi·ªán tho·∫°i",
                "S·ªë ƒë∆°n h√†ng",
                "Tr·∫°ng th√°i",
                "Thao t√°c",
              ]}
              data={filteredUsers}
              renderRow={(u) => (
                <>
                  <td className="px-4 py-2">{u.USER_ID}</td>
                  <td className="px-4 py-2">{u.FULLNAME || "‚Äî"}</td>
                  <td className="px-4 py-2">{u.EMAIL}</td>
                  <td className="px-4 py-2">{u.PHONE || "‚Äî"}</td>
                  <td className="px-4 py-2 text-center">{u.orderCount ?? 0}</td>
                  <td className="px-4 py-2">
                    {u.IS_DELETED ? (
                      <span className="px-3 py-1 text-xs font-medium text-red-800 bg-red-100 rounded-full">
                        B·ªã c·∫•m
                      </span>
                    ) : u.VERIFIED ? (
                      <span className="px-3 py-1 text-xs font-medium text-green-800 bg-green-100 rounded-full">
                        ƒê√£ x√°c minh
                      </span>
                    ) : (
                      <span className="px-3 py-1 text-xs font-medium text-yellow-800 bg-yellow-100 rounded-full">
                        Ch∆∞a x√°c minh
                      </span>
                    )}
                  </td>

                  <td className="px-4 py-2 flex gap-2">
                    {u.IS_DELETED ? (
                      <Button
                        className="bg-amber-600"
                        onClick={() => openModal("restore", u)}
                      >
                        G·ª° c·∫•m
                      </Button>
                    ) : (
                      <>
                        <Link to={`/customers/${u.USER_ID}`}>
                          <Button className="bg-blue-600">Chi ti·∫øt</Button>
                        </Link>
                        <Link to={`/customers/orders/${u.USER_ID}`}>
                          <Button className="bg-teal-600">Xem ƒë∆°n h√†ng</Button>
                        </Link>
                        {!u.VERIFIED && (
                          <Button
                            className="bg-green-600"
                            onClick={() => openModal("verify", u)}
                          >
                            X√°c minh
                          </Button>
                        )}
                        <Button
                          className="bg-red-600"
                          onClick={() => openModal("ban", u)}
                        >
                          C·∫•m
                        </Button>
                      </>
                    )}
                  </td>
                </>
              )}
            />
          )}
        </Card>
      </div>

      {/* üß± Modal x√°c nh·∫≠n h√†nh ƒë·ªông */}
      <Modal
        open={modalOpen}
        title="X√°c nh·∫≠n h√†nh ƒë·ªông"
        onClose={() => setModalOpen(false)}
      >
        {selectedUser && (
          <>
            <p className="text-gray-700 mb-4">
              {modalAction === "verify" &&
                `B·∫°n c√≥ ch·∫Øc mu·ªën x√°c minh t√†i kho·∫£n "${selectedUser.EMAIL}"?`}
              {modalAction === "ban" &&
                `B·∫°n c√≥ ch·∫Øc mu·ªën c·∫•m t√†i kho·∫£n "${selectedUser.EMAIL}"?`}
              {modalAction === "restore" &&
                `B·∫°n c√≥ mu·ªën g·ª° c·∫•m t√†i kho·∫£n "${selectedUser.EMAIL}"?`}
            </p>

            <div className="flex justify-end gap-3">
              <Button
                className="bg-gray-400"
                onClick={() => setModalOpen(false)}
              >
                H·ªßy
              </Button>
              <Button
                className={
                  modalAction === "ban"
                    ? "bg-red-600"
                    : modalAction === "verify"
                    ? "bg-green-600"
                    : "bg-amber-600"
                }
                onClick={handleConfirmAction}
              >
                X√°c nh·∫≠n
              </Button>
            </div>
          </>
        )}
      </Modal>
    </Layout>
  );
}
