import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import Button from "../../components/ui/Button";
import useAdminUsers from "../../hooks/useCustomer";
import Layout from "../../components/layouts/Layout";

export default function CustomerDetail({ onClose }) {
  const { id } = useParams();
  const { fetchUserById, verifyUser, loading } = useAdminUsers();
  const [user, setUser] = useState(null);
  const [verifying, setVerifying] = useState(false);

  // üü° L·∫•y chi ti·∫øt user khi m·ªü trang
  useEffect(() => {
    async function loadUser() {
      const data = await fetchUserById(id);
      if (data) setUser(data);
    }
    loadUser();
  }, [id, fetchUserById]);

  // üü¢ H√†m x√°c minh ng∆∞·ªùi d√πng
  const handleVerify = async () => {
    if (!user) return;
    setVerifying(true);
    try {
      await verifyUser(user.USER_ID);
      const updated = await fetchUserById(user.USER_ID);
      setUser(updated);
      alert("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng!");
    } catch (err) {
      alert("‚ùå L·ªói x√°c minh ng∆∞·ªùi d√πng!");
    } finally {
      setVerifying(false);
    }
  };

  if (loading && !user)
    return <p className="text-center text-gray-500">ƒêang t·∫£i th√¥ng tin...</p>;

  if (!user)
    return (
      <p className="text-center text-gray-500">Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.</p>
    );

  const {
    USER_ID,
    EMAIL,
    PHONE,
    FULLNAME,
    BIRTHDATE,
    AVATAR_URL,
    ADDRESS,
    ID_CARD,
    LICENSE_FRONT_URL,
    LICENSE_BACK_URL,
    RATING,
    VERIFIED,
    PROVIDER,
    PROVIDER_ID,
    CREATED_AT,
    UPDATED_AT,
  } = user;

  return (
    <Layout>
      <div className="space-y-6">
        {/* Avatar + t√™n */}
        <div className="flex items-center gap-4">
          <img
            src={
              AVATAR_URL || "http://localhost:8080/images/default-avatar.png"
            }
            alt="avatar"
            className="w-20 h-20 rounded-full border object-cover"
          />
          <div>
            <h3 className="text-xl font-semibold text-gray-800">
              {FULLNAME || "‚Äî"}
            </h3>
            <p className="text-sm text-gray-500">M√£ ng∆∞·ªùi d√πng: {USER_ID}</p>
            <p className="text-sm text-gray-500">
              {VERIFIED ? (
                <span className="text-green-600 font-semibold">
                  ƒê√£ x√°c minh
                </span>
              ) : (
                <span className="text-yellow-600 font-semibold">
                  Ch∆∞a x√°c minh
                </span>
              )}
            </p>
          </div>
        </div>

        {/* Th√¥ng tin li√™n h·ªá */}
        <section className="grid grid-cols-2 gap-x-6 gap-y-2 text-sm">
          <p>
            <strong>Email:</strong> {EMAIL || "‚Äî"}
          </p>
          <p>
            <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {PHONE || "‚Äî"}
          </p>
          <p>
            <strong>Ng√†y sinh:</strong> {BIRTHDATE || "‚Äî"}
          </p>
          <p>
            <strong>ƒê·ªãa ch·ªâ:</strong> {ADDRESS || "‚Äî"}
          </p>
          <p>
            <strong>CMND/CCCD:</strong> {ID_CARD || "‚Äî"}
          </p>
          <p>
            <strong>Nh√† cung c·∫•p:</strong> {PROVIDER || "local"}
          </p>
          {PROVIDER !== "local" && (
            <p>
              <strong>Provider ID:</strong> {PROVIDER_ID || "‚Äî"}
            </p>
          )}
          <p>
            <strong>ƒêi·ªÉm ƒë√°nh gi√°:</strong> ‚≠ê{" "}
            {Number(RATING) ? Number(RATING).toFixed(2) : "0.00"}
          </p>
          <p>
            <strong>T·∫°o l√∫c:</strong>{" "}
            {new Date(CREATED_AT).toLocaleString("vi-VN")}
          </p>
          <p>
            <strong>C·∫≠p nh·∫≠t:</strong>{" "}
            {new Date(UPDATED_AT).toLocaleString("vi-VN")}
          </p>
        </section>

        {/* B·∫±ng l√°i xe */}
        <div>
          <h4 className="text-sm font-semibold text-gray-700 mb-2">
            ·∫¢nh b·∫±ng l√°i xe
          </h4>
          <div className="grid grid-cols-2 gap-4">
            <div className="border rounded-lg p-2 bg-gray-50">
              <p className="text-xs text-gray-600 mb-1 font-medium">
                M·∫∑t tr∆∞·ªõc
              </p>
              {LICENSE_FRONT_URL ? (
                <img
                  src={LICENSE_FRONT_URL}
                  alt="M·∫∑t tr∆∞·ªõc b·∫±ng l√°i"
                  className="w-full rounded-md border object-cover max-h-56"
                />
              ) : (
                <p className="text-gray-400 text-center py-8 text-sm">
                  Ch∆∞a c√≥ h√¨nh m·∫∑t tr∆∞·ªõc
                </p>
              )}
            </div>

            <div className="border rounded-lg p-2 bg-gray-50">
              <p className="text-xs text-gray-600 mb-1 font-medium">M·∫∑t sau</p>
              {LICENSE_BACK_URL ? (
                <img
                  src={LICENSE_BACK_URL}
                  alt="M·∫∑t sau b·∫±ng l√°i"
                  className="w-full rounded-md border object-cover max-h-56"
                />
              ) : (
                <p className="text-gray-400 text-center py-8 text-sm">
                  Ch∆∞a c√≥ h√¨nh m·∫∑t sau
                </p>
              )}
            </div>
          </div>
        </div>

        {/* H√†nh ƒë·ªông */}
        <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
          {!VERIFIED && (
            <Button
              className="bg-green-600"
              onClick={handleVerify}
              disabled={verifying}
            >
              {verifying ? "ƒêang x√°c minh..." : "X√°c minh ng∆∞·ªùi d√πng"}
            </Button>
          )}
          <Button className="bg-gray-400" onClick={onClose}>
            ƒê√≥ng
          </Button>
        </div>
      </div>
    </Layout>
  );
}
